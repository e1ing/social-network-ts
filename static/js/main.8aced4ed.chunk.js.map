{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Navbar/Navbar.module.css","components/Users/users.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Posts/Post.module.css","components/Header/Header.module.css","components/Navbar/Navbar.tsx","redux/dialogs-reducer.ts","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","api/api.ts","redux/users-reducer.ts","asserts/images/user.jpg","components/Users/Users.tsx","asserts/images/loader.gif","components/common/Preloader/Preloader.tsx","components/Users/UsersContainer.tsx","components/Profile/MyPosts/ProfileInfo/ProfileStatus.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.ts","components/Profile/MyPosts/Posts/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","redux/auth-reducer.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.ts","index.tsx"],"names":["module","exports","Navbar","className","classes","nav","item","to","activeClassName","activeLink","UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","initialState","dialogs","id","v1","name","messages","message","newMessageBody","dialogsReducer","state","action","type","newText","body","Message","props","dialog","DialogItem","active","Dialogs","updateNewMessageBody","sendMessage","dialogsPage","isAuth","dialogsElements","map","d","messagesElements","m","newMessageElement","React","createRef","dialogItems","value","onChange","e","target","placeholder","onClick","ref","mapStateToProps","auth","withAuthRedirect","Component","connect","restProps","compose","dispatch","updateNewMessageBodyAC","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","get","then","response","data","post","delete","profileAPI","getProfile","getStatus","updateStatus","status","put","authAPI","users","totalUsersCount","isFetching","followingInProgress","toggleIsFetching","TOGGLE_IS_FETCHING","toggleFollowingProgress","TOGGLE_IS_FOLLOWING_PROGRESS","usersReducer","FOLLOW","u","userId","followed","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","filter","Users","unfollow","follow","onPageChanged","pagesCount","Math","ceil","console","log","pages","i","push","p","styles","selectedPage","src","photos","small","userPhoto","disabled","some","Preloader","style","backgroundColor","loader","UsersContainer","pageNumber","getUsers","this","usersPage","resultCode","setCurrentPage","items","totalCount","ProfileStatus","editMode","activateEditMode","setState","deactivateEditMode","onStatusChange","currentTarget","prevProps","prevState","onDoubleClick","autoFocus","onBlur","ProfileInfo","profile","large","newPostText","posts","likesCount","setStatus","SET_STATUS","profileReducer","ADD_POST","newPost","UPDATE_NEW_POST_TEXT","SET_USER_PROFILE","Post","MyPosts","postsElements","profilePage","postsBlock","text","updateNewPostText","addPost","MyPostsContainer","updateNewPostTextAC","Profile","ProfileContainer","match","params","getUserProfile","withRouter","email","login","authReducer","SET_USER_DATA","Header","header","alt","loginBlock","HeaderContainer","getAuthUserData","Login","LoginForm","formik","useFormik","initialValues","password","rememberMe","validate","values","onSubmit","alert","JSON","stringify","handleSubmit","getFieldProps","errors","touched","checked","App","path","render","DialogsContainer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","profileReduser","dialogsReduser","store","createStore","applyMiddleware","thunkMiddleware","window","getState","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8aced4ed.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__30JT8\",\"dialogItems\":\"Dialogs_dialogItems__10n3I\",\"active\":\"Dialogs_active__RX1PQ\",\"messages\":\"Dialogs_messages__3i4-W\",\"message\":\"Dialogs_message__uQ6yh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3BiCR\",\"item\":\"Navbar_item__2q8AI\",\"activeLink\":\"Navbar_activeLink__3kze7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__2MEGo\",\"selectedPage\":\"users_selectedPage__349lx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1UyEY\",\"posts\":\"MyPosts_posts__3qYkg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__Xcglc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__80499\",\"loginBlock\":\"Header_loginBlock__1uwoe\"};","import React from 'react';\r\nimport classes from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Navbar = () => {\r\n    return <nav className={classes.nav}>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/dialogs\" activeClassName={classes.activeLink}> Messages</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/users\" activeClassName={classes.activeLink}> Users</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to={\"/news\"}>News</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to={\"/music\"}>Music</NavLink></div>\r\n        <div className={classes.item}>\r\n            <NavLink to={\"/settings\"}>Settings</NavLink>\r\n        </div>\r\n    </nav>\r\n        ;\r\n}\r\nexport default Navbar;","import {v1} from \"uuid\";\r\n\r\nconst UPDATE_NEW_MESSAGE_BODY = \"UPDATE-NEW-MESSAGE-BODY\";\r\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\r\n\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: v1(), name: 'Dimych'},\r\n        {id: v1(), name: 'Andrew'},\r\n        {id: v1(), name: 'Sveta'},\r\n        {id: v1(), name: 'Sasha'},\r\n        {id: v1(), name: 'Viktor'}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: v1(), message: 'Hi'},\r\n        {id: v1(), message: \"What's up\"},\r\n        {id: v1(), message: 'Yo'},\r\n        {id: v1(), message: 'Crap!'},\r\n        {id: v1(), message: 'Hi, Bro!'}\r\n    ] as Array<MessageType>,\r\n    newMessageBody: \"\" as string\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = ReturnType<typeof sendMessageAC> | ReturnType<typeof updateNewMessageBodyAC>\r\n\r\n const dialogsReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            return {...state, newMessageBody: action.newText}\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody;\r\n            return {\r\n                ...state,\r\n                newMessageBody: \"\",\r\n                messages: [...state.messages, {id: v1(), message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const sendMessageAC = () => ({type: SEND_MESSAGE}) as const\r\n\r\nexport const updateNewMessageBodyAC = (body: string) => ({\r\n    type: UPDATE_NEW_MESSAGE_BODY,\r\n    newText: body\r\n}) as const\r\n\r\n//types\r\nexport type DialogType = {\r\n    id: string\r\n    name: string\r\n    avatar?: string\r\n}\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nexport type InitialStatType = typeof initialState\r\n\r\nexport default dialogsReducer;\r\n","import React from 'react'\r\nimport classes from './../Dialogs.module.css'\r\nimport {MessageType} from \"../../../redux/dialogs-reducer\";\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return <div className={classes.dialog}>{props.message}</div>\r\n}\r\n\r\n\r\nexport default Message;","import React from 'react'\r\nimport classes from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport Message from \"../Message/Message\";\r\nimport {DialogType} from \"../../../redux/dialogs-reducer\";\r\nimport {DialogsPageType} from \"../../../redux/store\";\r\n\r\n\r\nconst DialogItem:React.FC<DialogType> = ({id, name}) => {\r\n    let path = \"/dialogs/\" + id;\r\n    return <div className={classes.dialog + ' ' + classes.active}>\r\n        <NavLink to={\"/dialogs/\" + id}>{name}</NavLink>\r\n    </div>\r\n}\r\n\r\n\r\nconst DialogsItem :React.FC<DialogsPageType> = (props) => {\r\n\r\n    let dialogsElements = props.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>)\r\n    let messagesElements = props.messages.map(m => <Message message={m.message} id={m.id}/>)\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                {messagesElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React, {ChangeEvent, FC} from 'react'\r\nimport classes from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype DialogsPropsType = {\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: () => void\r\n    dialogsPage: InitialStateType\r\n    isAuth: boolean\r\n}\r\n\r\nconst Dialogs: FC<DialogsPropsType> = ({\r\n                                           updateNewMessageBody,\r\n                                           sendMessage,\r\n                                           dialogsPage,\r\n                                           isAuth\r\n                                       }) => {\r\n\r\n    let dialogsElements = dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id} key={d.id}/>)\r\n    let messagesElements = dialogsPage.messages.map(m => <Message message={m.message} id={m.id} key={m.id}/>)\r\n    let newMessageElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n    let addMessage = () => {\r\n        let mess = newMessageElement.current?.value;\r\n        alert(mess);\r\n    }\r\n    let newMessageBody = dialogsPage.newMessageBody;\r\n\r\n    let onSendMessageClick = () => {\r\n        sendMessage();\r\n    }\r\n    let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.target.value;\r\n        updateNewMessageBody(body)\r\n    }\r\n\r\n    if(!isAuth) return <Redirect to={\"/login\"}></Redirect>;\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n\r\n            <div className={classes.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <div>\r\n                                <textarea value={newMessageBody}\r\n                                          onChange={onNewMessageChange}\r\n                                          placeholder=\"Enter message\">\r\n                            </textarea>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <button onClick={onSendMessageClick}> Send</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <button>Send</button>\r\n            <textarea ref={newMessageElement}></textarea>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\"\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport { ComponentType } from \"react\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport function withAuthRedirect  <T>(Component: ComponentType<T>)  {\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n            if(!isAuth) return <Redirect to=\"/login\"/>\r\n            return <Component {...restProps as T} />\r\n    }\r\n     return connect(mapStateToProps)(RedirectComponent);\r\n}\r\n\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\n\r\n","import React, {ComponentType} from 'react'\r\nimport {InitialStateType, sendMessageAC, updateNewMessageBodyAC} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        updateNewMessageBody: (body: string) => {\r\n            dispatch(updateNewMessageBodyAC(body));\r\n        },\r\n        sendMessage: () => {\r\n            dispatch(sendMessageAC());\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: InitialStateType //дробить?\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: () => void\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"b00b044a-fabf-40f0-8522-d4dd85a812f0\"}\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(id: number) {\r\n        return instance.post(`follow/${id}`)\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n    },\r\n    getProfile(id: string) {\r\n        console.warn(\"Obsolete method. Use profileAPI object\")\r\n        return profileAPI.getProfile(id)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(id: string) {\r\n        return instance.get(`profile/` + id)\r\n    },\r\n    getStatus(id: string) {\r\n        return instance.get(`profile/status/` + id)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status/`, {status})\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(data: ResponseType) {\r\n        return instance.post<ResponseType>(\"auth/login\", data)\r\n    }\r\n}\r\n\r\n//types\r\ntype ResponseType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}","import { Dispatch } from \"redux\";\r\nimport {usersAPI} from \"../api/api\";\r\n\r\nlet initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [],\r\n}\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true};\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false};\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {...state, followingInProgress: action.isFetching\r\n                        ? [...state.followingInProgress, action.id]\r\n            :  state.followingInProgress.filter(id=>id!=action.id)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const followSuccess = (userId: number) => ({type: FOLLOW, userId} as const)\r\nexport const unfollowSuccess = (userId: number) => ({type: UNFOLLOW, userId} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({type: SET_TOTAL_USERS_COUNT, totalUsersCount} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nexport const toggleFollowingProgress = (isFetching: boolean, id: number) => ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, id} as const)\r\n\r\n\r\n//thunk creators\r\nexport const getUsers =(currentPage: number, pageSize: number) => {\r\n    return (dispatch: Dispatch) => {\r\n    dispatch(toggleIsFetching(true));\r\n\r\n    usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n      dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    })\r\n}}\r\n\r\nexport const follow =(id: number, isFetching: boolean) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, id));\r\n        usersAPI.follow(id)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(followSuccess(id))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, id))\r\n            })\r\n    }\r\n}\r\n\r\nexport const unfollow =(id: number, isFetching: boolean) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, id));\r\n        usersAPI.unfollow(id)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(unfollowSuccess(id))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, id))\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer;\r\n\r\n//types\r\n\r\ntype ActionsTypes = ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\nexport type UserType = {\r\n    id: number,\r\n    name: string,\r\n    photos: {\r\n        small: string | null,\r\n        large: string | null\r\n    }\r\n    followed: boolean,\r\n    status: string,\r\n    location: { country: string, city: string }\r\n}\r\n\r\nexport type InitialStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\"\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\";\r\n","export default __webpack_public_path__ + \"static/media/user.32c67670.jpg\";","import styles from \"./users.module.css\";\r\nimport userPhoto from \"../../asserts/images/user.jpg\";\r\nimport React, {FC} from \"react\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Users: FC<UsersPropsType> = ({users,unfollow, follow, totalUsersCount,\r\n                                       pageSize, onPageChanged, currentPage,\r\n                                       followingInProgress}) => {\r\n\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\r\n    console.log('pages', pagesCount)\r\n    console.log('totalUsersCount', totalUsersCount)\r\n    console.log('pageSize', pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n        return <div>\r\n            <div>\r\n                {pages.map(p => {\r\n\r\n                    return <span className={currentPage === p ? styles.selectedPage : \"\"}\r\n                                 onClick={(e) => {onPageChanged(p)}}\r\n                                 >\r\n                   {p}</span>\r\n                })}\r\n\r\n            </div>\r\n            {\r\n              users.map(u => <div key={u.id}>\r\n                    <span>\r\n                        <div>\r\n                              <NavLink to={\"/profile/\"}>\r\n                            <img src={u.photos.small !== null ? u.photos.small : userPhoto}\r\n                                   className={styles.userPhoto}/>\r\n                              </NavLink>\r\n                              </div>\r\n                        <div>\r\n                            {u.followed\r\n                                ?\r\n                                <button disabled={followingInProgress\r\n                                    .some(id=>id===u.id)}\r\n                                        onClick={() => {unfollow(u.id)}}> Unfollow </button>\r\n                                :\r\n                                <button disabled={followingInProgress\r\n                                    .some(id=>id===u.id)} onClick={() => {follow(u.id)}}>Follow</button>\r\n                            }\r\n\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n    <div>{u.name}</div>\r\n    <div>{u.status}</div>\r\n</span>\r\n\r\n                </div>)\r\n            }\r\n        </div>\r\n\r\n}\r\n    export default Users;\r\n\r\nexport type UsersPropsType = {\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    onPageChanged:(pageNumber: number) => void\r\n    currentPage: number\r\n    followingInProgress: Array<number>\r\n}","export default __webpack_public_path__ + \"static/media/loader.af80ae8f.gif\";","import loader from \"../../../asserts/images/loader.gif\";\r\nimport React, {FC} from \"react\";\r\n\r\nexport const Preloader: FC = () => {\r\n    return (\r\n    <div  style={{backgroundColor:\"white\"}}>\r\n        <img src={loader}/>\r\n    </div>\r\n    )\r\n}\r\n","import React, {Component, ComponentType} from 'react';\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {follow, getUsers, setCurrentPage, toggleFollowingProgress, unfollow, UserType} from \"../../redux/users-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport Users from \"./Users\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\nclass UsersContainer extends Component<UsersPropsType, {}> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                users={this.props.users}\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(withAuthRedirect, connect(mapStateToProps, {\r\n    follow, unfollow, setCurrentPage, toggleFollowingProgress, getUsers\r\n}))(UsersContainer)\r\n\r\n//types\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype MapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    follow: any\r\n    unfollow: any\r\n    setCurrentPage: (currentPage: number) => void\r\n    toggleFollowingProgress: (isFetching: boolean, id: number) => void\r\n    getUsers: any\r\n}\r\n","import React, {ChangeEvent, Component} from 'react';\r\n\r\n\r\nclass ProfileStatus extends Component<ProfileStatusPropsType> {\r\n    /*constructor (props:ProfileStatusPropsType) {\r\n        super(props)\r\n    }*/\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({editMode: true})\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({editMode: false})\r\n        this.props.updateStatus(this.state.status);\r\n    }\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({status: e.currentTarget.value})\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<{}>) {\r\n       if(prevProps.status!==this.props.status) {\r\n           this.setState({status: this.props.status})\r\n       }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                <div>\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || \"----\"}</span>\r\n                </div>\r\n                }\r\n                {this.state.editMode &&\r\n                <div>\r\n                    <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode}\r\n                           value={this.state.status}/>\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}","import React, {FC} from 'react';\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../../common/Preloader/Preloader\";\r\nimport ProfileStatus from './ProfileStatus';\r\n\r\n\r\nconst ProfileInfo: FC<ProfileInfoPropsType> = ({profile,status, updateStatus}) => {\r\n    if (!profile){\r\n        return <Preloader/>\r\n    }\r\n    return <div>\r\n        <div>\r\n            <img\r\n                src='https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350'/>\r\n        </div>\r\n        <div className=\"classes.descriptionBlock\">\r\n            <img src={profile.photos.large}></img>\r\n            <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n        </div>\r\n    </div>\r\n}\r\nexport default ProfileInfo;\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}","import { Dispatch } from \"redux\";\r\nimport {v1} from \"uuid\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\n\r\nlet initialState = {\r\n    newPostText: \"\",\r\n    posts: [\r\n        {id: v1(), message: \"Hi, how are you?\", likesCount: 12},\r\n        {id: v1(), message: \"It's my first post\", likesCount: 7},\r\n        {id: v1(), message: \"It's my second post\", likesCount: 5}\r\n    ] as Array<PostType>,\r\n    profile: null as null | ProfileType,\r\n    status: \"\"\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    let stateCopy = {...state, posts: [...state.posts]}\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost = {\r\n                id: v1(),\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {...state, posts: [...state.posts, newPost]}\r\n            state.newPostText = '';\r\n        case UPDATE_NEW_POST_TEXT:\r\n            return {\r\n                ...state, newPostText: action.newText\r\n            }\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const addPostAC = () => ({type: ADD_POST}) as const\r\nexport const updateNewPostTextAC = (text: string) => ({type: UPDATE_NEW_POST_TEXT, newText: text}) as const\r\nexport const setStatus = (status: string) => ({type: SET_STATUS, status} as const)\r\nexport const setUserProfile = (profile:ProfileType|null) => ({type: SET_USER_PROFILE, profile}as const)\r\n\r\n//thunk creators\r\nexport const getUserProfile = (id: string) => (dispatch:Dispatch) => {\r\n    profileAPI.getProfile(id).then(response => {\r\n        dispatch(setUserProfile(response.data))\r\n    })\r\n}\r\n\r\nexport const getStatus = (id: string) => (dispatch: Dispatch) => {\r\n    profileAPI.getStatus(id)\r\n        .then(response => {\r\n            dispatch(setStatus(response.data))\r\n        })\r\n}\r\n\r\nexport const updateStatus = (status: string) => (dispatch: Dispatch) => {\r\n    profileAPI.updateStatus(status)\r\n        .then(response => {\r\n            if(response.data.resultCode===0) {\r\n                dispatch(setStatus(status))\r\n            }\r\n        })\r\n}\r\n\r\nexport default profileReducer;\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\nconst SET_STATUS = \"SET_STATUS\";\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ProfileContactsType\r\n    photos: {small: string, large: string}\r\n}\r\n\r\nexport type ProfileContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\ntype ActionsTypes = ReturnType<typeof addPostAC> | ReturnType<typeof updateNewPostTextAC>\r\n    | ReturnType<typeof setUserProfile> |ReturnType<typeof setStatus>","import React from 'react';\r\nimport classes from './Post.module.css';\r\nimport {PostType} from \"../../../../redux/store\";\r\n\r\nconst Post: React.FC<PostType> = ({id, message,likesCount}) => {\r\n    return (\r\n        <div>\r\n            <div className={classes.item}>\r\n                <img\r\n                    src=\"https://tlum.ru/uploads/c2c776f1f20dd128d27ab941c26168c2e866ef6551da751aea7e83ae862a032a.jpeg\"/>\r\n                <div className={classes.item}>\r\n                    {message}\r\n                    <div>\r\n                        <span>like</span>{likesCount}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from \"./Posts/Post\";\r\nimport {InitialStateType} from \"../../../redux/profile-reducer\";\r\n\r\ntype MyPostsPropsType = {\r\n    profilePage: InitialStateType\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MyPostsPropsType> = (props) => {\r\n\r\n    let postsElements = props.profilePage.posts.map(p =>\r\n        <Post id={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    /*let newPostElement = React.createRef<HTMLTextAreaElement>();*/\r\n\r\n    let onAddPost = () => {\r\n        props.addPost();\r\n    }\r\n\r\n    let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = e.currentTarget.value;\r\n        props.updateNewPostText(text);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3> My posts </h3>\r\n            <div>\r\n                <div>\r\n                    <textarea\r\n                        onChange={onPostChange}\r\n                        value={props.profilePage.newPostText}\r\n                    />\r\n                </div>\r\n                <button onClick={onAddPost}> Add post</button>\r\n            </div>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostAC, InitialStateType, updateNewPostTextAC} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    profilePage: InitialStateType\r\n    newPostText: string\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: () => {\r\n            dispatch(addPostAC());\r\n        },\r\n\r\n        updateNewPostText: (text) => {\r\n            let action = updateNewPostTextAC(text);\r\n            dispatch(action)\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\nconst Profile: React.FC<PropsType> = ({profile, status, updateStatus}) => {\r\n\r\n    return <div>\r\n        <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n}\r\nexport default Profile;\r\n\r\n//types\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n","import React, {Component, ComponentType} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\nclass ProfileContainer extends Component<CommonProfileContainerPropsType> {\r\n    componentDidMount() {\r\n        let id = this.props.match.params.id\r\n        if (!id) {\r\n            id = \"17186\";\r\n        }\r\n        this.props.getUserProfile(id)\r\n        this.props.getStatus(id)\r\n    }\r\n\r\n    render() {\r\n\r\n        return <div>\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status\r\n})\r\n\r\nexport default compose<ComponentType>(connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter, withAuthRedirect)(ProfileContainer)\r\n\r\n//types\r\ntype ProfileContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (id: string) => void\r\n    getStatus: (status: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    id?: string\r\n}\r\n\r\ntype CommonProfileContainerPropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\n\r\nlet initialState = {\r\n    id: null as null|number,\r\n    email: null as null|string,\r\n    login: null as null|string,\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n//actions\r\nexport const setAuthUserData = (data:AuthPropsType) => ({type: SET_USER_DATA, data} as const)\r\n\r\n//thunk creators\r\nexport const getAuthUserData = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(response.data.data))\r\n            }\r\n        })\r\n}\r\n\r\n\r\nexport default authReducer;\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\nconst SET_USER_DATA = \"SET_USER_DATA\";\r\nexport type AuthPropsType = {\r\n    id: number,\r\n    email: string,\r\n    login: string,\r\n    isAuth: boolean\r\n}\r\ntype ActionsTypes = ReturnType<typeof setAuthUserData>\r\n\r\n\r\n\r\n","import React, { FC } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './Header.module.css';\r\nimport {HeaderContainerPropsType} from \"./HeaderContainer\";\r\n\r\n\r\n\r\nconst Header: FC<HeaderContainerPropsType> = ({isAuth, login}) => {\r\n    return <header className = {classes.header}>\r\n        <img alt='Some beach here' src='https://cdn.logo.com/hotlink-ok/logo-social-sq.png'/>\r\n        <div className={classes.loginBlock }>\r\n            {isAuth\r\n                ? login\r\n                : <NavLink to={\"/login\"}>Login</NavLink>\r\n            }\r\n        </div>\r\n    </header>;\r\n}\r\nexport default Header;","import React, {Component} from 'react';\r\n\r\nimport {getAuthUserData} from \"../../redux/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport Header from './Header';\r\n\r\n\r\n\r\nexport type HeaderContainerPropsType = MapDispatchToPropsType & MapStateToPropsType\r\n\r\nclass HeaderContainer extends Component<HeaderContainerPropsType> {\r\n    componentDidMount() {\r\n        this.props.getAuthUserData();\r\n    }\r\n\r\n    render() {\r\n\r\n        return <Header {...this.props} />;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        login: state.auth.login,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getAuthUserData})(HeaderContainer);\r\n\r\n\r\n//types\r\ntype MapDispatchToPropsType = {\r\n    getAuthUserData: any\r\n}\r\ntype MapStateToPropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n}","import { useFormik } from \"formik\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const Login = ({}) => {\r\n    return <div>\r\n        <h1> Log in </h1>\r\n        <LoginForm/>\r\n    </div>\r\n}\r\n\r\nexport const LoginForm = () => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            login: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            if (!values.login) {\r\n                return {login: 'Email is required'}\r\n            }\r\n            if (!values.password) {\r\n                return {password: 'Password is required'}\r\n            }\r\n        },\r\n        onSubmit: values => {\r\n            alert(JSON.stringify(values));\r\n        },\r\n    });\r\n\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <div>\r\n            <input placeholder={\"Login\"}  {...formik.getFieldProps(\"login\")}/>\r\n\r\n        </div>\r\n        {formik.errors.login && formik.touched.login ? <div>{formik.errors.login}</div> : null}\r\n        <div>\r\n            <input placeholder={\"Password\"}  {...formik.getFieldProps(\"password\")}/>\r\n        </div>\r\n        {formik.errors.password && formik.touched.password ? <div>{formik.errors.password}</div>: null}\r\n        <div>\r\n            <input type={\"checkbox\"}  checked={formik.values.rememberMe}\r\n                   {...formik.getFieldProps(\"rememberMe\")}/> remember me\r\n        </div>\r\n        <div>\r\n            <button type=\"submit\">Submit</button>\r\n        </div>\r\n    </form>\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport { Login } from './components/Login/Login';\r\n\r\n\r\nconst App = () => {\r\n    return (\r\n        <BrowserRouter>\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\r\n                    <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n                    <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n                    <Route path=\"/login\" render={() => <Login/>}/>\r\n                </div>\r\n            </div>\r\n        </BrowserRouter>)\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReduser from \"./profile-reducer\";\r\nimport dialogsReduser from \"./dialogs-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReduser,\r\n    dialogsPage: dialogsReduser,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer> //state of application\r\nexport  type RootReduxStateType = ReturnType<typeof rootReducer>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type ReduxStoreType = typeof store\r\n// @ts-ignore\r\nwindow.store=store;\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './index.css';\r\nimport store, {RootReduxStateType} from \"./redux/redux-store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\"\r\n\r\n\r\nlet rerenderEntireTree = (state: RootReduxStateType) => {\r\n    ReactDOM.render(\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </BrowserRouter>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\nrerenderEntireTree(store.getState())\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}