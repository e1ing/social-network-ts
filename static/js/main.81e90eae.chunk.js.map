{"version":3,"sources":["api/api.ts","components/Navbar/Navbar.module.css","asserts/images/loader.gif","components/common/Preloader/Preloader.tsx","components/common/Paginator/Paginator.module.css","components/Header/Header.module.css","redux/profile-reducer.ts","redux/dialogs-reducer.ts","components/Users/Users.module.css","components/Navbar/Navbar.tsx","utils/objects-helpers/object-helper.ts","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","asserts/images/user.jpg","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","redux/auth-reducer.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["instance","axios","create","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","id","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","log","logout","module","exports","Preloader","style","backgroundColor","src","loader","initialState","newPostText","posts","v1","message","likesCount","profile","addPostAC","newPostMessage","type","updateNewPostTextAC","text","newText","setStatus","getUserProfile","dispatch","a","resultCode","profileReducer","state","action","newPost","filter","p","postId","dialogs","name","messages","newMessageBody","sendMessageAC","updateNewMessageBodyAC","body","dialogsReducer","Navbar","className","classes","nav","item","to","activeClassName","activeLink","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","totalUsersCount","isFetching","followingInProgress","followSuccess","userId","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","folllowUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","cn","selectedPage","pageNumber","e","User","user","photos","small","userPhoto","disabled","some","Users","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","props","this","Component","compose","connect","bind","page","totalCount","isAuth","setAuthUserData","payload","getAuthUserData","authReducer","Header","header","alt","loginBlock","HeaderContainer","auth","LoginForm","formik","useFormik","initialValues","validate","values","onSubmit","formData","handleSubmit","placeholder","getFieldProps","errors","touched","checked","initialized","SET_INITIALIZED","rootReducer","combineReducers","profilePage","dialogsPage","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","_store_","withSuspense","fallback","DialogsContainer","React","lazy","ProfileContainer","App","initializeApp","path","render","AppContainer","withRouter","SamuraiTSApp","basename","process","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","getState","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.81e90eae.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"b00b044a-fabf-40f0-8522-d4dd85a812f0\"}\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(id: number) {\r\n        return instance.post(`follow/${id}`)\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n    },\r\n    getProfile(id: string) {\r\n        console.warn(\"Obsolete method. Use profileAPI object\")\r\n        return profileAPI.getProfile(id)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(id: string) {\r\n        return instance.get(`profile/` + id)\r\n    },\r\n    getStatus(id: string) {\r\n        return instance.get(`profile/status/` + id)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status/`, {status})\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`);\r\n    },\r\n    // Login(data: ResponseType) {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        const data = { email, password, rememberMe }\r\n        console.log('tut', data)\r\n        return instance.post(\"auth/login\", data);\r\n    },\r\n    logout() {\r\n        return instance.delete(\"auth/login\");\r\n    }\r\n}\r\n\r\n//types\r\n/*\r\ntype ResponseType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}*/","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2e-Le\",\"item\":\"Navbar_item__1aPzz\",\"activeLink\":\"Navbar_activeLink__31clV\"};","export default __webpack_public_path__ + \"static/media/loader.af80ae8f.gif\";","import loader from \"../../../asserts/images/loader.gif\";\r\nimport React, {FC} from \"react\";\r\n\r\nexport const Preloader: FC = () => {\r\n    return (\r\n    <div  style={{backgroundColor:\"white\"}}>\r\n        <img src={loader}/>\r\n    </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__UEKAA\",\"pageNumber\":\"Paginator_pageNumber__AV6Tg\",\"selectedPage\":\"Paginator_selectedPage__jtS9D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__22eFF\",\"loginBlock\":\"Header_loginBlock__BqvfD\"};","import { Dispatch } from \"redux\";\r\nimport {v1} from \"uuid\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ProfileContactsType\r\n    photos: {small: string, large: string}\r\n}\r\nexport type ProfileContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\ntype ActionsTypes = ReturnType<typeof addPostAC> | ReturnType<typeof updateNewPostTextAC>\r\n    | ReturnType<typeof setUserProfile> |ReturnType<typeof setStatus>|ReturnType<typeof deletePost>\r\nexport type InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    newPostText: \"\",\r\n    posts: [\r\n        {id: v1(), message: \"Hi, how are you?\", likesCount: 12},\r\n        {id: v1(), message: \"It's my first post\", likesCount: 7},\r\n        {id: v1(), message: \"It's my second post\", likesCount: 5}\r\n    ] as Array<PostType>,\r\n    profile: null as null | ProfileType,\r\n    status: \"\"\r\n};\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    let stateCopy = {...state, posts: [...state.posts]}\r\n    switch (action.type) {\r\n        case \"profile/ADD-POST\":\r\n            let newPost = {\r\n                id: v1(),\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {...state, posts: [...state.posts, newPost]}\r\n            state.newPostText = '';\r\n        case \"profile/UPDATE-NEW-POST-TEXT\":\r\n            return {\r\n                ...state, newPostText: action.newText\r\n            }\r\n        case \"profile/SET_USER_PROFILE\":\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        case \"profile/SET_STATUS\":\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        case \"profile/DELETE-POST\":\r\n            return {\r\n                ...state, posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostAC = (newPostMessage: string) => ({type: \"profile/ADD-POST\", newPostMessage}) as const\r\nexport const updateNewPostTextAC = (text: string) => ({type: \"profile/UPDATE-NEW-POST-TEXT\", newText: text}) as const\r\nexport const setStatus = (status: string) => ({type: \"profile/SET_STATUS\", status} as const)\r\nexport const setUserProfile = (profile:ProfileType|null) => ({type: \"profile/SET_USER_PROFILE\", profile}as const)\r\nexport const deletePost = (postId: string) => ({type: \"profile/DELETE-POST\", postId}as const)\r\n\r\nexport const getUserProfile = (id: string) => async (dispatch:Dispatch) => {\r\n   const response = await profileAPI.getProfile(id)\r\n        console.log(response.data);\r\n        dispatch(setUserProfile(response.data))\r\n}\r\n\r\nexport const getStatus = (id: string) => async (dispatch: Dispatch) => {\r\n    const response = await profileAPI.getStatus(id)\r\n            dispatch(setStatus(response.data))\r\n}\r\n\r\nexport const updateStatus = (status: string) => async (dispatch: Dispatch) => {\r\n  const response = await profileAPI.updateStatus(status)\r\n            if(response.data.resultCode===0) {\r\n                dispatch(setStatus(status))\r\n            }\r\n}\r\n\r\nexport default profileReducer;\r\n\r\n\r\n","import {v1} from \"uuid\";\r\n\r\nexport type DialogType = {\r\n    id: string\r\n    name: string\r\n    avatar?: string\r\n}\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\nexport type InitialStatType = typeof initialState\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = ReturnType<typeof sendMessageAC> | ReturnType<typeof updateNewMessageBodyAC>\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: v1(), name: 'Dimych'},\r\n        {id: v1(), name: 'Andrew'},\r\n        {id: v1(), name: 'Sveta'},\r\n        {id: v1(), name: 'Sasha'},\r\n        {id: v1(), name: 'Viktor'}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: v1(), message: 'Hi'},\r\n        {id: v1(), message: \"What's up\"},\r\n        {id: v1(), message: 'Yo'},\r\n        {id: v1(), message: 'Crap!'},\r\n        {id: v1(), message: 'Hi, Bro!'}\r\n    ] as Array<MessageType>,\r\n    newMessageBody: \"\" as string\r\n}\r\n\r\n\r\nconst dialogsReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case  \"dialogs/UPDATE-NEW-MESSAGE-BODY\":\r\n            return {...state, newMessageBody: action.newText}\r\n        case \"dialogs/SEND-MESSAGE\":\r\n            let body = state.newMessageBody;\r\n            return {\r\n                ...state,\r\n                newMessageBody: \"\",\r\n                messages: [...state.messages, {id: v1(), message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageAC = () => ({type: \"dialogs/SEND-MESSAGE\"}) as const\r\nexport const updateNewMessageBodyAC = (body: string) => ({type: \"dialogs/UPDATE-NEW-MESSAGE-BODY\",newText: body}) as const\r\n\r\nexport default dialogsReducer;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__QTIOB\"};","import React from 'react';\r\nimport classes from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Navbar = () => {\r\n    return <nav className={classes.nav}>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/dialogs\" activeClassName={classes.activeLink}> Messages</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/users\" activeClassName={classes.activeLink}> Users</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to={\"/news\"}>News</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to={\"/music\"}>Music</NavLink></div>\r\n        <div className={classes.item}>\r\n            <NavLink to={\"/settings\"}>Settings</NavLink>\r\n        </div>\r\n    </nav>\r\n        ;\r\n}\r\nexport default Navbar;","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n   return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps};\r\n        }\r\n        return u;\r\n})\r\n}","import {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/objects-helpers/object-helper\";\r\n\r\ntype ActionsTypes = ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\nexport type UserType = {\r\n    id: number,\r\n    name: string,\r\n    photos: {\r\n        small: string | null,\r\n        large: string | null\r\n    }\r\n    followed: boolean,\r\n    status: string,\r\n    location: { country: string, city: string }\r\n}\r\nexport type InitialStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [],\r\n}\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"users/FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \" id\", {followed: true})\r\n            }\r\n        case \"users/UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \" id\", {followed: false})\r\n            }\r\n        case \"users/SET_USERS\":\r\n            return {...state, users: action.users}\r\n        case \"users/SET_CURRENT_PAGE\":\r\n            return {...state, currentPage: action.currentPage}\r\n        case \"users/SET_TOTAL_USERS_COUNT\":\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        case \"users/TOGGLE_IS_FETCHING\":\r\n            return {...state, isFetching: action.isFetching}\r\n        case \"users/TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n            return {\r\n                ...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.id]\r\n                    : state.followingInProgress.filter(id => id !== action.id)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const followSuccess = (userId: number) => ({type: \"users/FOLLOW\", userId} as const)\r\nexport const unfollowSuccess = (userId: number) => ({type: \"users/UNFOLLOW\", userId} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({type: \"users/SET_USERS\", users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: \"users/SET_CURRENT_PAGE\", currentPage} as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: \"users/SET_TOTAL_USERS_COUNT\",\r\n    totalUsersCount\r\n} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: \"users/TOGGLE_IS_FETCHING\", isFetching} as const)\r\nexport const toggleFollowingProgress = (isFetching: boolean, id: number) => ({\r\n    type: \"users/TOGGLE_IS_FOLLOWING_PROGRESS\", isFetching, id\r\n} as const)\r\n\r\nexport const requestUsers = (page: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n};\r\nexport const follow = (userId: number, isFetching: boolean) => {\r\n    return async (dispatch: Dispatch) => {\r\n        folllowUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess)\r\n    }\r\n}\r\nexport const unfollow = (userId: number, isFetching: boolean) => {\r\n    return async (dispatch: Dispatch) => {\r\n        folllowUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\r\n    }\r\n}\r\n\r\n\r\nconst folllowUnfollowFlow = async (dispatch: Dispatch, userId, apiMethod, actionCreator) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport default usersReducer;\r\n\r\n\r\n","import styles from \"./Paginator.module.css\";\r\nimport React, {FC, useState} from \"react\";\r\nimport cn from 'classnames'\r\n\r\nexport type PaginatorPropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    currentPage: number\r\n    portionSize: number\r\n}\r\n\r\nexport const Paginator: FC<PaginatorPropsType> = ({\r\n                                                      totalItemsCount, pageSize,\r\n                                                      onPageChanged, currentPage, portionSize\r\n                                                  }) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return <div className={styles.paginator}>\r\n        {\r\n            portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>\r\n        }\r\n\r\n        {\r\n            pages\r\n                .filter(p=> p >= leftPortionPageNumber && p<= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return <span className={cn({\r\n                        [styles.selectedPage]: currentPage===p\r\n                    }, styles.pageNumber)}\r\n                                 key={p}\r\n                                 onClick={(e) => {\r\n                                     onPageChanged(p);\r\n                                 }}>{p}</span>\r\n                })\r\n        }\r\n\r\n        {\r\n            portionCount > portionNumber &&\r\n            <button onClick={() => setPortionNumber(portionNumber + 1)}>NEXT</button>\r\n        }\r\n\r\n    </div>\r\n}\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/user.32c67670.jpg\";","import styles from \"./Users.module.css\";\r\nimport userPhoto from \"../../asserts/images/user.jpg\";\r\nimport React, {FC} from \"react\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type UsersPropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nexport const User: FC<UsersPropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n        <div>\r\n<span>\r\n <div>\r\n<NavLink to={\"/profile/\" + user.id}>\r\n<img src={user.photos.small !== null ? user.photos.small : userPhoto}\r\n     className={styles.userPhoto}/>\r\n</NavLink>\r\n</div>\r\n<div>\r\n{user.followed\r\n    ?\r\n    <button disabled={followingInProgress\r\n        .some(id => id === user.id)}\r\n            onClick={() => {\r\n                unfollow(user.id)\r\n            }}> Unfollow </button>\r\n    :\r\n    <button disabled={followingInProgress\r\n        .some(id => id === user.id)} onClick={() => {\r\n        follow(user.id)\r\n    }}>Follow</button>\r\n}\r\n</div>\r\n</span>\r\n            <span>\r\n<div>{user.name}</div>\r\n<div>{user.status}</div>\r\n</span>\r\n            <span>\r\n<div>{\"u.location.country\"}</div>\r\n<div>{\"u.status.location.city\"}</div>\r\n</span>\r\n        </div>)\r\n}\r\n\r\n\r\n","import React, {FC} from \"react\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\nimport {User} from \"./User\";\r\n\r\nexport type UsersPropsType = {\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    currentPage: number\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nconst Users: FC<UsersPropsType> = ({\r\n                                       users, unfollow, follow, totalUsersCount,\r\n                                       pageSize, onPageChanged, currentPage,\r\n                                       followingInProgress\r\n                                   }) => {\r\n\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\r\n    console.log('pages', pagesCount)\r\n    console.log('totalUsersCount', totalUsersCount)\r\n    console.log('pageSize', pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return <div>\r\n        <Paginator currentPage={currentPage}\r\n                   onPageChanged={onPageChanged}\r\n                   totalItemsCount={totalUsersCount}\r\n                   pageSize={pageSize} portionSize={pageSize}/>\r\n\r\n        {users.map(u => <User user={u} key={ u.id}\r\n                              followingInProgress={followingInProgress}\r\n                              unfollow={unfollow}\r\n                              follow={follow}/>\r\n        )}\r\n    </div>\r\n\r\n}\r\n\r\nexport default Users;\r\n\r\n","import { createSelector } from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u=>true)\r\n})\r\n\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\n\r\n","import React, {Component, ComponentType} from 'react';\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {follow, requestUsers, setCurrentPage, toggleFollowingProgress, unfollow, UserType} from \"../../redux/users-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport Users from \"./Users\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {compose} from 'redux';\r\nimport {\r\n    getUsers,\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount\r\n} from \"../../redux/users-selectors\";\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype MapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    follow: any\r\n    unfollow: any\r\n    setCurrentPage: (currentPage: number) => void\r\n    toggleFollowingProgress: (isFetching: boolean, id: number) => void\r\n    getUsers: any\r\n}\r\n\r\nclass UsersContainer extends Component<UsersPropsType, {}> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                users={this.props.users}\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n\r\n/*let mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n    }\r\n}*/\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(connect(mapStateToProps, {\r\n    follow, unfollow, setCurrentPage, toggleFollowingProgress, getUsers: requestUsers\r\n}))(UsersContainer)\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport { authAPI } from \"../api/api\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\nexport type AuthPropsType = {\r\n    id: number ,\r\n    email: string,\r\n    login: string,\r\n    isAuth: boolean\r\n}\r\ntype AuthActionsTypes = ReturnType<typeof setAuthUserData>\r\ntype LoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\n\r\nlet initialState:AuthPropsType = {\r\n    id: 1,\r\n    email:'',\r\n    login:'',\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state: InitialStateType = initialState, action: AuthActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"auth/SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id: number, email: string, login: string, isAuth: boolean) => ({\r\n    type: \"auth/SET_USER_DATA\", payload: {id, email, login, isAuth}} as const)\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch<AuthActionsTypes>) => {\r\n   let response = await authAPI.me()\r\n            if (response.data.resultCode === 0) {\r\n                let {id, email, login} = response.data.data\r\n                dispatch(setAuthUserData(id, email, login, true))\r\n            }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean) => async (dispatch: ThunkDispatch<AppStateType, unknown, AuthActionsTypes>) => {\r\n    let response = await authAPI.login(email, password, rememberMe);\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(getAuthUserData())\r\n            }\r\n}\r\n\r\nexport const logout = () => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.logout()\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(-1, \"\", \"\", false))\r\n            }\r\n}\r\n\r\nexport default authReducer;\r\n\r\n\r\n","import React, { FC } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './Header.module.css';\r\nimport {HeaderContainerPropsType} from \"./HeaderContainer\";\r\n\r\n\r\n\r\nconst Header: FC<HeaderContainerPropsType> = ({isAuth, login, logout}) => {\r\n    return <header className = {classes.header}>\r\n        <img alt='Some beach here' src='https://cdn.logo.com/hotlink-ok/logo-social-sq.png'/>\r\n        <div className={classes.loginBlock }>\r\n            {isAuth\r\n                ? <div>{login} - <button onClick={logout}>Log out</button></div>\r\n                : <NavLink to={\"/Login\"}>Login</NavLink>\r\n            }\r\n        </div>\r\n    </header>;\r\n}\r\nexport default Header;","import React, {Component} from 'react';\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport Header from './Header';\r\n\r\n\r\nclass HeaderContainer extends Component<HeaderContainerPropsType> {\r\n\r\n    render() {\r\n\r\n        return <Header {...this.props} />;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        login: state.auth.login,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);\r\n\r\n\r\n//types\r\nexport type HeaderContainerPropsType = MapDispatchToPropsType & MapStateToPropsType\r\ntype MapDispatchToPropsType = {\r\n    logout: () => void\r\n}\r\ntype MapStateToPropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n}","import {useFormik} from \"formik\";\r\nimport React, { FC } from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nexport const Login: FC<LoginType> = ({isAuth, login}) => {\r\n\r\n    if (isAuth){\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1> Log in </h1>\r\n        <LoginForm login={login}/>\r\n    </div>\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType =>  ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType , {}, AppStateType>(\r\n    mapStateToProps, {login}\r\n)(Login)\r\n\r\n//types\r\ntype LoginType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    login: (email:string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\ntype PrType = {\r\n    login: (email:string, password: string, rememberMe: boolean) => void\r\n}\r\nexport const LoginForm = (props:PrType ) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {email: 'Email is required'}\r\n            }\r\n            if (!values.password) {\r\n                return {password: 'Password is required'}\r\n            }\r\n        },\r\n        onSubmit: (formData) => {\r\n            props.login(formData.email, formData.password, formData.rememberMe)\r\n        },\r\n    });\r\n\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <div>\r\n            <input placeholder={\"Email\"}  {...formik.getFieldProps(\"email\")}/>\r\n        </div>\r\n        {formik.errors.email && formik.touched.email ? <div>{formik.errors.email}</div> : null}\r\n        <div>\r\n            <input placeholder={\"Password\"} type={\"password\"} {...formik.getFieldProps(\"password\")}/>\r\n        </div>\r\n        {formik.errors.password && formik.touched.password ? <div>{formik.errors.password}</div>: null}\r\n        <div>\r\n            <input type={\"checkbox\"}  checked={formik.values.rememberMe}\r\n                   {...formik.getFieldProps(\"rememberMe\")}/> remember me\r\n        </div>\r\n        <div>\r\n            <button type=\"submit\">Submit</button>\r\n        </div>\r\n    </form>\r\n}","\r\nimport {getAuthUserData, setAuthUserData} from \"./auth-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType=initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED:\r\n            return{\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//action creator\r\nexport const initializedSuccess = () => ({type: SET_INITIALIZED} as const)\r\n\r\n//thunk creator\r\nexport const initializeApp = () => (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>) => {\r\ndispatch(getAuthUserData())\r\n    .then(()=> {\r\n        dispatch(initializedSuccess())\r\n    })\r\n}\r\n\r\n//types\r\nconst SET_INITIALIZED =\"SET_INITIALIZED\"\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = ReturnType<typeof initializedSuccess>|ReturnType<typeof setAuthUserData>","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer\r\n});\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer> //state of application\r\nexport  type RootReduxStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type ReduxStoreType = typeof store\r\n// @ts-ignore\r\nwindow._store_=store;\r\nexport default store;\r\n","import React, {ComponentType, Suspense} from \"react\";\r\nimport {Preloader} from \"../components/common/Preloader/Preloader\";\r\n\r\nexport const withSuspense = (Component: ComponentType) => {\r\n    return (props) => {\r\n        return <Suspense fallback={<Preloader/>}>\r\n            <Component {...props}/>\r\n        </Suspense>\r\n    }\r\n}","import React, {Component, Suspense} from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport {BrowserRouter, Route, withRouter} from \"react-router-dom\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from './components/Login/Login';\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from 'redux';\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport store, {AppStateType} from \"./redux/redux-store\";\r\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\r\nimport {getAuthUserData} from \"./redux/auth-reducer\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n\r\n\r\n//types\r\ntype MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getAuthUserData: () => void\r\n    initializeApp: () => void\r\n}\r\ntype AppType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass App extends Component <AppType> {\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n                    <div className='app-wrapper'>\r\n                        <HeaderContainer/>\r\n                        <Navbar/>\r\n                        <div className='app-wrapper-content'>\r\n                            <Route path='/dialogs' render={withSuspense(DialogsContainer)}/>\r\n                            <Route path='/profile/:userId?' render={withSuspense(ProfileContainer)}/>\r\n                            <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n                            <Route path=\"/login\" render={() => <Login/>}/>\r\n                        </div>\r\n                    </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mupStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    initialized: state.app.initialized\r\n})\r\nlet AppContainer = compose(withRouter,\r\n    connect(mupStateToProps, {initializeApp, getAuthUserData}))(App);\r\n\r\nexport let SamuraiTSApp = () => {\r\n    return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n    )\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {SamuraiTSApp} from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store, {RootReduxStateType} from './redux/redux-store';\r\n\r\n\r\nlet rerenderEntireTree = (state: RootReduxStateType) => {\r\n    ReactDOM.render(\r\n                <SamuraiTSApp/>,\r\n        document.getElementById(\"root\")\r\n    );\r\n}\r\nrerenderEntireTree(store.getState())\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}