{"version":3,"sources":["components/Profile/MyPosts/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Posts/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","hoc/withAuthRedirect.tsx","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Posts/Post.module.css"],"names":["ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","setStatusLoc","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","ProfileInfo","profile","src","className","photos","large","Preloader","Post","id","message","likesCount","classes","item","MyPosts","props","postsElements","profilePage","posts","map","p","postsBlock","text","updateNewPostText","newPostText","onClick","addPost","MyPostsContainer","connect","state","dispatch","addPostAC","action","updateNewPostTextAC","Profile","ProfileContainer","console","log","this","match","params","Number","userId","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","withRouter","withAuthRedirect","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","mapStateToPropsForRedirect","restProps","to","module","exports"],"mappings":"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","file":"static/js/3.abe11a62.chunk.js","sourcesContent":["\r\nimport React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\n\r\n\r\n\r\nconst ProfileStatusWithHooks: FC<ProfileStatusPropsType> = ({status, updateStatus}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [statusLoc, setStatusLoc] = useState(status)\r\n\r\n    useEffect(() => {\r\n        setStatusLoc(status)\r\n    }, [])\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatusLoc(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{status || \"----\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}","import React, {FC} from 'react';\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../../common/Preloader/Preloader\";\r\nimport ProfileStatus from './ProfileStatus';\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\nconst ProfileInfo: FC<ProfileInfoPropsType> = ({profile,status, updateStatus}) => {\r\n    if (!profile){\r\n        return <Preloader/>\r\n    }\r\n    return <div>\r\n        <div>\r\n            <img\r\n                src='https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350'/>\r\n        </div>\r\n        <div className=\"classes.descriptionBlock\">\r\n            <img src={profile.photos.large}></img>\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n        </div>\r\n    </div>\r\n}\r\nexport default ProfileInfo;\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}","import React from 'react';\r\nimport classes from './Post.module.css';\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\n\r\n\r\nconst Post: React.FC<PostType> = ({id, message,likesCount}) => {\r\n    return (\r\n        <div>\r\n            <div className={classes.item}>\r\n                <img\r\n                    src=\"https://tlum.ru/uploads/c2c776f1f20dd128d27ab941c26168c2e866ef6551da751aea7e83ae862a032a.jpeg\"/>\r\n                <div className={classes.item}>\r\n                    {message}\r\n                    <div>\r\n                        <span>like</span>{likesCount}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from \"./Posts/Post\";\r\nimport {InitialStateType} from \"../../../redux/profile-reducer\";\r\n\r\ntype MyPostsPropsType = {\r\n    profilePage: InitialStateType\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MyPostsPropsType> = (props) => {\r\n\r\n    let postsElements = props.profilePage.posts.map(p =>\r\n        <Post id={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    /*let newPostElement = React.createRef<HTMLTextAreaElement>();*/\r\n\r\n    let onAddPost = () => {\r\n        props.addPost();\r\n    }\r\n\r\n    let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = e.currentTarget.value;\r\n        props.updateNewPostText(text);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3> My posts </h3>\r\n            <div>\r\n                <div>\r\n                    <textarea\r\n                        onChange={onPostChange}\r\n                        value={props.profilePage.newPostText}\r\n                    />\r\n                </div>\r\n                <button onClick={onAddPost}> Add post</button>\r\n            </div>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostAC, InitialStateType, updateNewPostTextAC} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    profilePage: InitialStateType\r\n    newPostText: string\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostMessage: string) => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText));\r\n        },\r\n\r\n        updateNewPostText: (text) => {\r\n            let action = updateNewPostTextAC(text);\r\n            dispatch(action)\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst Profile: React.FC<PropsType> = ({profile, status, updateStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return <div>\r\n        <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n}\r\nexport default Profile;\r\n\r\n","import React, {Component, ComponentType} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\nclass ProfileContainer extends Component<CommonProfileContainerPropsType> {\r\n    componentDidMount() {\r\n        console.log(this.props.match.params);\r\n        let id = Number(this.props.match.params.userId)\r\n        if (!id) {\r\n            id = this.props.authorizedUserId /*? this.props.authorizedUserId : 17186 ;*/\r\n            if(!id){\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(id)\r\n        this.props.getStatus(id)\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<ComponentType>(connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter, withAuthRedirect)(ProfileContainer)\r\n\r\n//types\r\ntype ProfileContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number| null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (id: number) => void\r\n    getStatus: (status: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId?: string\r\n}\r\n\r\ntype CommonProfileContainerPropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\n\r\n","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype mapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): mapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: mapStateToPropsForRedirectType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to = {\"/Login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1cqPN\",\"posts\":\"MyPosts_posts__f-P4m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1g_qD\"};"],"sourceRoot":""}