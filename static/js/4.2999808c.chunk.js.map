{"version":3,"sources":["components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","hoc/withAuthRedirect.tsx"],"names":["Message","props","className","classes","dialog","message","DialogItem","id","name","active","to","Dialogs","updateNewMessageBody","sendMessage","dialogsPage","isAuth","dialogsElements","dialogs","map","d","messagesElements","messages","m","newMessageElement","React","createRef","newMessageBody","dialogItems","ref","compose","connect","state","auth","dispatch","body","updateNewMessageBodyAC","sendMessageAC","withAuthRedirect","module","exports","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","mapStateToPropsForRedirect","Component","restProps"],"mappings":"gMASeA,EALwB,SAACC,GACpC,OAAO,qBAAKC,UAAWC,IAAQC,OAAxB,SAAiCH,EAAMI,WCM5CC,EAAkC,SAAC,GAAgB,IAAfC,EAAc,EAAdA,GAAIC,EAAU,EAAVA,KAE1C,OAAO,qBAAKN,UAAWC,IAAQC,OAAS,IAAMD,IAAQM,OAA/C,SACH,cAAC,IAAD,CAASC,GAAI,YAAcH,EAA3B,SAAgCC,OAsBzBF,I,OC+BAK,EApDuB,SAAC,GAKM,EAJFC,qBAIE,EAHFC,YAGG,IAFHC,EAEE,EAFFA,YACAC,EACE,EADFA,OAGnCC,EAAkBF,EAAYG,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYX,KAAMW,EAAEX,KAAMD,GAAIY,EAAEZ,IAASY,EAAEZ,OAC1Fa,EAAmBN,EAAYO,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASjB,QAASiB,EAAEjB,QAASE,GAAIe,EAAEf,IAASe,EAAEf,OAC/FgB,EAAoBC,IAAMC,YAMTX,EAAYY,eAcjC,OAAIX,EAAe,cAAC,IAAD,CAAUL,GAAI,WAG7B,sBAAKR,UAAWC,IAAQc,QAAxB,UAEI,qBAAKf,UAAWC,IAAQwB,YAAxB,SACKX,IAGL,sBAAKd,UAAWC,IAAQkB,SAAxB,UACI,8BAAMD,IACN,2BAKJ,0CACA,0BAAUQ,IAAKL,Q,wBCjCZM,sBAAuBC,aAjBhB,SAACC,GACnB,MAAO,CACHjB,YAAaiB,EAAMjB,YACnBC,OAAQgB,EAAMC,KAAKjB,WAGF,SAACkB,GACtB,MAAO,CACHrB,qBAAsB,SAACsB,GACnBD,EAASE,YAAuBD,KAEpCrB,YAAa,WACToB,EAASG,oBAK+DC,IAArER,CAAuFlB,I,mBC3BtG2B,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,6ECAjK,SAASC,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIE,EAAKC,EADLC,ECHS,SAAuCJ,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EDTM,CAA6BJ,EAAQC,GAGlD,GAAIK,OAAOI,sBAAuB,CAChC,IAAIC,EAAmBL,OAAOI,sBAAsBV,GAEpD,IAAKG,EAAI,EAAGA,EAAIQ,EAAiBH,OAAQL,IACvCD,EAAMS,EAAiBR,GACnBF,EAASQ,QAAQP,IAAQ,GACxBI,OAAOM,UAAUC,qBAAqBC,KAAKd,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,IAIzB,OAAOE,E,0BERHW,EAA6B,SAACzB,GAAD,MAA0D,CACzFhB,OAAQgB,EAAMC,KAAKjB,SAGhB,SAASsB,EAAoBoB,GAOhC,OAAO3B,YAAQ0B,EAAR1B,EALmB,SAAC7B,GAA2C,IAC7Dc,EAAwBd,EAAxBc,OAAW2C,EADiD,EACpCzD,EADoC,YAEjE,OAAKc,EACE,cAAC0C,EAAD,eAAeC,IADF,cAAC,IAAD,CAAUhD,GAAM","file":"static/js/4.2999808c.chunk.js","sourcesContent":["import React from 'react'\r\nimport classes from './../Dialogs.module.css'\r\nimport {MessageType} from \"../../../redux/dialogs-reducer\";\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return <div className={classes.dialog}>{props.message}</div>\r\n}\r\n\r\n\r\nexport default Message;","import React from 'react'\r\nimport classes from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport Message from \"../Message/Message\";\r\nimport {DialogType, MessageType} from \"../../../redux/dialogs-reducer\";\r\n\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    newMessageBody: string\r\n}\r\nconst DialogItem:React.FC<DialogType> = ({id, name}) => {\r\n    let path = \"/dialogs/\" + id;\r\n    return <div className={classes.dialog + ' ' + classes.active}>\r\n        <NavLink to={\"/dialogs/\" + id}>{name}</NavLink>\r\n    </div>\r\n}\r\n\r\n\r\nconst DialogsItem :React.FC<DialogsPageType> = (props) => {\r\n\r\n    let dialogsElements = props.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>)\r\n    let messagesElements = props.messages.map(m => <Message message={m.message} id={m.id}/>)\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                {messagesElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React, {ChangeEvent, FC} from 'react'\r\nimport classes from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {Field, Form, Formik} from 'formik';\r\n\r\ntype DialogsPropsType = {\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: () => void\r\n    dialogsPage: InitialStateType\r\n    isAuth: boolean\r\n}\r\n\r\nconst Dialogs: FC<DialogsPropsType> = ({\r\n                                           updateNewMessageBody,\r\n                                           sendMessage,\r\n                                           dialogsPage,\r\n                                           isAuth\r\n                                       }) => {\r\n\r\n    let dialogsElements = dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id} key={d.id}/>)\r\n    let messagesElements = dialogsPage.messages.map(m => <Message message={m.message} id={m.id} key={m.id}/>)\r\n    let newMessageElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n    let addMessage = () => {\r\n        let mess = newMessageElement.current?.value;\r\n        alert(mess);\r\n    }\r\n    let newMessageBody = dialogsPage.newMessageBody;\r\n\r\n    let onSendMessageClick = () => {\r\n        sendMessage();\r\n    }\r\n    let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.target.value;\r\n        updateNewMessageBody(body)\r\n    }\r\n\r\n   /* let addNewMessage = (values: string) => {\r\n        alert(values.newMessageBody)\r\n    }*/\r\n\r\n    if (isAuth) return <Redirect to={\"/login\"}></Redirect>;\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n\r\n            <div className={classes.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    {/*<AddMessageForm/>*/}\r\n                </div>\r\n\r\n            </div>\r\n            <button>Send</button>\r\n            <textarea ref={newMessageElement}></textarea>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n\r\n\r\n/*const AddMessageForm = () => {\r\n\r\n    return (\r\n\r\n        <Formik\r\n            initialValues={{ email: '', color: 'red', firstName: '', lastName: '' }}\r\n            onSubmit={(values, actions) => {\r\n                setTimeout(() => {\r\n                    alert(JSON.stringify(values, null, 2));\r\n                    actions.setSubmitting(false);\r\n                }, 1000);\r\n            }}\r\n        >\r\n\r\n        <Form >\r\n            <div>\r\n                <Field type=\"textarea\" name=\"newMessageBody\" placeholder=\"Enter message\" />\r\n            </div>\r\n            <div>\r\n                <button> Send</button>\r\n            </div>\r\n        </Form>\r\n        </Formik>\r\n    )\r\n}*/\r\n\r\n\r\n","import React, {ComponentType} from 'react'\r\nimport {InitialStateType, sendMessageAC, updateNewMessageBodyAC} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        updateNewMessageBody: (body: string) => {\r\n            dispatch(updateNewMessageBodyAC(body));\r\n        },\r\n        sendMessage: () => {\r\n            dispatch(sendMessageAC());\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: InitialStateType //дробить?\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: () => void\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2XDNa\",\"dialogItems\":\"Dialogs_dialogItems__3UILS\",\"active\":\"Dialogs_active__20aBj\",\"messages\":\"Dialogs_messages__3oxni\",\"message\":\"Dialogs_message__2av77\"};","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype mapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): mapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: mapStateToPropsForRedirectType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to = {\"/Login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}"],"sourceRoot":""}