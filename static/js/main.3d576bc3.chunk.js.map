{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Posts/Post.module.css","components/Header/Header.module.css","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/MyPosts/Posts/Post.tsx","redux/state.ts","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Dialogs/Dialogs.module.css","components/Navbar/Navbar.module.css"],"names":["module","exports","Header","className","classes","header","alt","src","Navbar","nav","item","to","activeClassName","activeLink","Post","id","message","likesCount","ADD_POST","UPDATE_NEW_POST_TEXT","store","_state","profilePage","newPostText","posts","v1","dialogsPage","dialogs","name","messages","sidebar","_callSubscriber","console","log","getState","this","subscribe","observer","dispatch","action","type","newPost","push","newText","MyPosts","postsElements","map","p","postsBlock","onChange","e","currentTarget","value","onClick","ProfileInfo","Profile","Message","props","dialog","DialogItem","active","Dialogs","dialogsElements","d","messagesElements","m","newMessageElement","React","createRef","dialogItems","ref","App","path","render","state","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rerenderEntireTree","ReactDOM","bind","document","getElementById"],"mappings":"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","file":"static/js/main.3d576bc3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1UyEY\",\"posts\":\"MyPosts_posts__3qYkg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__Xcglc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__80499\"};","import React from 'react';\r\nimport classes from './Header.module.css';\r\n\r\nconst Header = () => {\r\n    return <header className = {classes.header}>\r\n        <img alt='Some beach here' src='https://cdn.logo.com/hotlink-ok/logo-social-sq.png'/>\r\n    </header>;\r\n}\r\nexport default Header;","import React from 'react';\r\nimport classes from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Navbar = () => {\r\n    return <nav className={classes.nav}>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/dialogs\" activeClassName={classes.activeLink}> Messages</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to={\"/news\"}>News</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to={\"/music\"}>Music</NavLink></div>\r\n        <div className={classes.item}>\r\n            <NavLink to={\"/settings\"}>Settings</NavLink>\r\n        </div>\r\n    </nav>\r\n        ;\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport classes from './Post.module.css';\r\nimport {PostType} from \"../../../../redux/state\";\r\n\r\nconst Post: React.FC<PostType> = ({id, message,likesCount}) => {\r\n    return (\r\n        <div>\r\n            <div className={classes.item}>\r\n                <img\r\n                    src=\"https://tlum.ru/uploads/c2c776f1f20dd128d27ab941c26168c2e866ef6551da751aea7e83ae862a032a.jpeg\"/>\r\n                <div className={classes.item}>\r\n                    {message}\r\n                    <div>\r\n                        <span>like</span>{likesCount}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\nexport default Post;","import {v1} from \"uuid\";\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type DialogType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\n\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n}\r\n\r\nexport type SidebarType = {}\r\n\r\nexport type RootStateType = {\r\n    profilePage: ProfilePageType\r\n    dialogsPage: DialogsPageType\r\n    sidebar: SidebarType\r\n}\r\n\r\nexport type ProfileCallbacksType = {\r\n    addPostCallback: () => void\r\n    updateNewPostText: (postText: string) => void\r\n}\r\n\r\nexport type StoreType = {\r\n    _state: RootStateType\r\n    _callSubscriber: (state:  RootStateType) => void\r\n    subscribe: (observer: (state:  RootStateType) => void) => void\r\n    getState: () => RootStateType\r\n    dispatch: (action: ActionsTypes) => void\r\n}\r\nexport type ActionsTypes = ReturnType<typeof addPostAC> | ReturnType<typeof updateNewPostTextAC>;\r\n\r\nexport const addPostAC = () => ({\r\n        type: ADD_POST\r\n    }) as const\r\n\r\n\r\n     export const updateNewPostTextAC = (newText: string) => ({\r\n            type: UPDATE_NEW_POST_TEXT,\r\n            newText: newText\r\n        }) as const\r\n\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\n\r\n     let store: StoreType  = {\r\n        _state: {\r\n            profilePage: {\r\n                newPostText: \"\",\r\n                posts: [\r\n                    {id: v1(), message: \"Hi, how are you?\", likesCount: 12},\r\n                    {id: v1(), message: \"It's my first post\", likesCount: 7},\r\n                    {id: v1(), message: \"It's my second post\", likesCount: 5}\r\n                ]\r\n            },\r\n            dialogsPage: {\r\n                dialogs: [\r\n                    {id: v1(), name: 'Dimych'},\r\n                    {id: v1(), name: 'Andrew'},\r\n                    {id: v1(), name: 'Sveta'},\r\n                    {id: v1(), name: 'Sasha'},\r\n                    {id: v1(), name: 'Viktor'}\r\n                ],\r\n                messages: [\r\n                    {id: v1(), message: 'Hi'},\r\n                    {id: v1(), message: \"What's up\"},\r\n                    {id: v1(), message: 'Yo'},\r\n                    {id: v1(), message: 'Crap!'},\r\n                    {id: v1(), message: 'Hi, Bro!'}\r\n                ]\r\n            },\r\n            sidebar: {}\r\n        },\r\n        _callSubscriber() {\r\n            console.log('State changed');\r\n        },\r\n\r\n        getState() {\r\n            return this._state;\r\n        },\r\n        subscribe(observer) {\r\n            this._callSubscriber = observer; //наблюдатель\r\n        },\r\n\r\n        dispatch(action: ActionsTypes) {\r\n            if (action.type === \"ADD-POST\") {\r\n                let newPost: PostType = {\r\n                    id: v1(),\r\n                    message: this._state.profilePage.newPostText,\r\n                    likesCount: 0\r\n                };\r\n                this._state.profilePage.posts.push(newPost);\r\n                this._state.profilePage.newPostText = ''\r\n                this._callSubscriber(this._state);\r\n            } else if (action.type === \"UPDATE-NEW-POST-TEXT\") {\r\n                debugger\r\n                this._state.profilePage.newPostText = action.newText;\r\n                this._callSubscriber(this._state);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\nexport default store;\r\n\r\n    //store - OOP","import React, {ChangeEvent} from 'react';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from \"./Posts/Post\";\r\nimport {\r\n    ActionsTypes,\r\n    addPostAC, PostType,\r\n    updateNewPostTextAC\r\n} from \"../../../redux/state\";\r\n\r\ntype PropsType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n    dispatch: (action: ActionsTypes) => void\r\n}\r\n\r\nconst MyPosts: React.FC<PropsType> = ({\r\n                                          posts,\r\n                                          newPostText,\r\n                                          dispatch\r\n                                      }) => {\r\n\r\n    let postsElements = posts.map(p =>\r\n        <Post id={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    // let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let addPost = () => {\r\n        dispatch(addPostAC());\r\n    }\r\n\r\n    let onPostChange = (e: any) => {\r\n        // if (newPostElement.current){\r\n        //     let text = newPostElement.current.value;\r\n        //     let action = updateNewPostTextAC(text);\r\n        //     dispatch(action)\r\n        // }\r\n        let action = updateNewPostTextAC(e.currentTarget.value);\r\n        dispatch(action)\r\n    }\r\n\r\n\r\n    /* const newTextChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n         updateNewPostText(e.currentTarget.value);\r\n     }*/\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3> My posts </h3>\r\n            <div>\r\n                <div>\r\n                    <textarea\r\n                        // ref={newPostText}\r\n                        onChange={onPostChange}\r\n                        value={newPostText}\r\n                    />\r\n                </div>\r\n                <button onClick={addPost}> Add post</button>\r\n            </div>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default MyPosts;","import React from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileInfo = () => {\r\n    return <div>\r\n        <div>\r\n            <img\r\n                src='https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350'/>\r\n        </div>\r\n        <div className=\"classes.descriptionBlock\">\r\n            ava+description\r\n        </div>\r\n    </div>\r\n}\r\nexport default ProfileInfo;","import React from 'react';\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport store, {ActionsTypes, DialogsPageType, ProfilePageType, StoreType} from \"../../redux/state\";\r\n\r\ntype PropsType = {\r\n    profilePage: ProfilePageType\r\n    dispatch: (action: ActionsTypes) => void\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = ({profilePage,dispatch}) => {\r\n\r\n    return <div>\r\n        <ProfileInfo/>\r\n        <MyPosts\r\n            posts={profilePage.posts}\r\n            newPostText={profilePage.newPostText}\r\n            dispatch={dispatch}/>\r\n    </div>\r\n}\r\nexport default Profile;","import React from 'react'\r\nimport classes from './../Dialogs.module.css'\r\nimport {MessageType} from \"../../../redux/state\";\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return <div className={classes.dialog}>{props.message}</div>\r\n}\r\n\r\n\r\nexport default Message;","import React from 'react'\r\nimport classes from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport Message from \"../Message/Message\";\r\nimport {DialogsPageType, DialogType} from \"../../../redux/state\";\r\n\r\n\r\n\r\nconst DialogItem:React.FC<DialogType> = ({id, name}) => {\r\n    let path = \"/dialogs/\" + id;\r\n    return <div className={classes.dialog + ' ' + classes.active}>\r\n        <NavLink to={\"/dialogs/\" + id}>{name}</NavLink>\r\n    </div>\r\n}\r\n\r\n\r\nconst DialogsItem :React.FC<DialogsPageType> = (props) => {\r\n\r\n    let dialogsElements = props.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>)\r\n    let messagesElements = props.messages.map(m => <Message message={m.message} id={m.id}/>)\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                {messagesElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react'\r\nimport classes from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {ActionsTypes, DialogsPageType} from \"../../redux/state\";\r\n\r\ntype PropsType = {\r\n    dialogsPage: DialogsPageType\r\n    dispatch: (action: ActionsTypes) => void\r\n\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = ({dialogsPage, dispatch}) => {\r\n\r\n    let dialogsElements = dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>)\r\n    let messagesElements = dialogsPage.messages.map(m => <Message message={m.message} id={m.id}/>)\r\n\r\n    let newMessageElement = React.createRef<HTMLTextAreaElement>()\r\n    let addMessage = () => {\r\n        let mess = newMessageElement.current?.value;\r\n        alert(mess);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <button >Send</button>\r\n            <textarea ref={newMessageElement}></textarea>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Profile from \"./components/Profile/Profile\";\nimport Dialogs from \"./components/Dialogs/Dialogs\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport {ActionsTypes, RootStateType} from \"./redux/state\";\n\ntype PropsType = {\n    state: RootStateType\n    dispatch: (action: ActionsTypes) => void\n}\n\nconst App: React.FC<PropsType > = (props) => {\n\n\n    return (\n        <BrowserRouter>\n            <div className='app-wrapper'>\n                <Header/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path='/dialogs' render={() =>\n                        <Dialogs dialogsPage={props.state.dialogsPage}  dispatch={props.dispatch}/>}/>\n                    <Route path='/profile' render={() =>\n                        <Profile profilePage={props.state.profilePage}\n                                 dispatch={props.dispatch}\n                                 />}/>\n                </div>\n            </div>\n        </BrowserRouter>)\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport store, {RootStateType, StoreType} from \"./redux/state\";\nimport {BrowserRouter} from \"react-router-dom\";\n\n\n let rerenderEntireTree = (state:  RootStateType ) => {\n    ReactDOM.render(\n        <BrowserRouter>\n            <App state ={state} dispatch = {store.dispatch.bind(store)}/>\n        </BrowserRouter>,\n\n       /* <React.StrictMode>\n            <App profilePage={store.getState().profilePage}\n                 dialogsPage={store.getState().dialogsPage}\n                 sidebar={store.getState().sidebar}\n            />\n        </React.StrictMode>,*/\n\n\n        document.getElementById('root')\n    );\n}\n\n\nrerenderEntireTree(store.getState());\n\nstore.subscribe (rerenderEntireTree);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__30JT8\",\"dialogItems\":\"Dialogs_dialogItems__10n3I\",\"active\":\"Dialogs_active__RX1PQ\",\"messages\":\"Dialogs_messages__3i4-W\",\"message\":\"Dialogs_message__uQ6yh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3BiCR\",\"item\":\"Navbar_item__2q8AI\",\"activeLink\":\"Navbar_activeLink__3kze7\"};"],"sourceRoot":""}