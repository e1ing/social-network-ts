{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Navbar/Navbar.module.css","components/Users/users.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Posts/Post.module.css","components/Header/Header.module.css","components/Navbar/Navbar.tsx","redux/dialogs-reducer.ts","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","redux/users-reducer.ts","asserts/images/Meelo.png","components/Users/Users.tsx","asserts/images/loader.gif","components/common/preloader/Preloader.tsx","api/api.ts","components/Users/UsersContainer.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.ts","components/Profile/MyPosts/Posts/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.ts","index.tsx"],"names":["module","exports","Navbar","className","classes","nav","item","to","activeClassName","activeLink","UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","initialState","dialogs","id","v1","name","messages","message","newMessageBody","dialogsReducer","state","action","type","newText","body","Message","props","dialog","DialogItem","active","Dialogs","updateNewMessageBody","sendMessage","dialogsPage","dialogsElements","map","d","messagesElements","m","newMessageElement","React","createRef","dialogItems","value","onChange","e","target","placeholder","onClick","ref","DialogsContainer","connect","dispatch","updateNewMessageBodyAC","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","toggleFollowingProgress","userId","usersReducer","u","followed","count","filter","Users","usersPage","follow","unfollow","onPageChanged","getUsers","pagesCount","Math","ceil","pages","i","push","p","styles","selectedPage","src","photos","small","userPhoto","usersPhoto","disabled","some","axios","delete","withCredentials","headers","then","response","data","resultCode","post","status","Preloader","style","backgroundColor","preloader","instance","create","baseURL","usersAPI","get","params","page","followAPI","UsersContainer","pageNumber","setCurrentPage","toggleIsFetching","setUsers","items","this","setTotalUsersCount","totalCount","Component","ProfileInfo","profile","large","fullName","ADD_POST","UPDATE_NEW_POST_TEXT","SET_USER_PROFILE","newPostText","posts","likesCount","profileReducer","newPost","Post","MyPosts","postsElements","profilePage","postsBlock","text","currentTarget","updateNewPostText","addPost","MyPostsContainer","updateNewPostTextAC","Profile","ProfileContainer","Number","match","setUserProfile","WithUrlDataContainerComponent","withRouter","Header","isAuth","login","header","alt","loginBlock","SET_USER_DATA","email","authReducer","HeaderContainer","setAuthUserData","auth","App","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","profileReduser","dialogsReduser","store","createStore","window","getState","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.efc55477.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2XDNa\",\"dialogItems\":\"Dialogs_dialogItems__3UILS\",\"active\":\"Dialogs_active__20aBj\",\"messages\":\"Dialogs_messages__3oxni\",\"message\":\"Dialogs_message__2av77\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2e-Le\",\"item\":\"Navbar_item__1aPzz\",\"activeLink\":\"Navbar_activeLink__31clV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"users_usersPhoto__ZCNPf\",\"selectedPage\":\"users_selectedPage__1JzRU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1cqPN\",\"posts\":\"MyPosts_posts__f-P4m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1g_qD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__22eFF\",\"loginBlock\":\"Header_loginBlock__BqvfD\"};","import React from 'react';\r\nimport classes from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Navbar = () => {\r\n    return <nav className={classes.nav}>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/dialogs\" activeClassName={classes.activeLink}> Messages</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to={\"/users\"}>Users</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to={\"/news\"}>News</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to={\"/music\"}>Music</NavLink></div>\r\n        <div className={classes.item}>\r\n            <NavLink to={\"/settings\"}>Settings</NavLink>\r\n        </div>\r\n\r\n    </nav>\r\n        ;\r\n}\r\nexport default Navbar;","import {v1} from \"uuid\";\r\n\r\nconst UPDATE_NEW_MESSAGE_BODY = \"UPDATE-NEW-MESSAGE-BODY\";\r\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\r\n\r\nexport type DialogType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: v1(), name: 'Dimych'},\r\n        {id: v1(), name: 'Andrew'},\r\n        {id: v1(), name: 'Sveta'},\r\n        {id: v1(), name: 'Sasha'},\r\n        {id: v1(), name: 'Viktor'}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: v1(), message: 'Hi'},\r\n        {id: v1(), message: \"What's up\"},\r\n        {id: v1(), message: 'Yo'},\r\n        {id: v1(), message: 'Crap!'},\r\n        {id: v1(), message: 'Hi, Bro!'}\r\n    ] as Array<MessageType>,\r\n    newMessageBody: \"\" as string\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = ReturnType<typeof sendMessageAC> | ReturnType<typeof updateNewMessageBodyAC>\r\n\r\n const dialogsReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            return {...state, newMessageBody: action.newText}\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody;\r\n            return {\r\n                ...state,\r\n                newMessageBody: \"\",\r\n                messages: [...state.messages, {id: v1(), message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const sendMessageAC = () => ({type: SEND_MESSAGE}) as const\r\n\r\nexport const updateNewMessageBodyAC = (body: string) => ({\r\n    type: UPDATE_NEW_MESSAGE_BODY,\r\n    newText: body\r\n}) as const\r\n\r\nexport default dialogsReducer;","import React from 'react'\r\nimport classes from './../Dialogs.module.css'\r\nimport {MessageType} from \"../../../redux/dialogs-reducer\";\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return <div className={classes.dialog}>{props.message}</div>\r\n}\r\n\r\n\r\nexport default Message;","import React from 'react'\r\nimport classes from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport Message from \"../Message/Message\";\r\nimport {DialogType} from \"../../../redux/dialogs-reducer\";\r\nimport {DialogsPageType} from \"../../../redux/store\";\r\n\r\n\r\nconst DialogItem:React.FC<DialogType> = ({id, name}) => {\r\n    let path = \"/dialogs/\" + id;\r\n    return <div className={classes.dialog + ' ' + classes.active}>\r\n        <NavLink to={\"/dialogs/\" + id}>{name}</NavLink>\r\n    </div>\r\n}\r\n\r\n\r\nconst DialogsItem :React.FC<DialogsPageType> = (props) => {\r\n\r\n    let dialogsElements = props.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>)\r\n    let messagesElements = props.messages.map(m => <Message message={m.message} id={m.id}/>)\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                {messagesElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React, {ChangeEvent} from 'react'\r\nimport classes from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\n\r\ntype DialogsPropsType = {\r\n    updateNewMessageBody: (body:string) => void\r\n    sendMessage: () => void\r\n    dialogsPage: InitialStateType\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = ({\r\n                                          updateNewMessageBody,\r\n                                          sendMessage,\r\n                                          dialogsPage\r\n                                      }) => {\r\n\r\n    // let state_=state.dialogsPage;\r\n\r\n    let dialogsElements = dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id} key={d.id}/>)\r\n    let messagesElements = dialogsPage.messages.map(m => <Message message={m.message} id={m.id} key={m.id}/>)\r\n    let newMessageElement = React.createRef<HTMLTextAreaElement>()\r\n\r\n    let addMessage = () => {\r\n        let mess = newMessageElement.current?.value;\r\n        alert(mess);\r\n    }\r\n    let newMessageBody = dialogsPage.newMessageBody;\r\n\r\n    let onSendMessageClick = () => {\r\n        sendMessage();\r\n    }\r\n    let onNewMessageChange =  (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let body = e.target.value;\r\n        updateNewMessageBody(body)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n\r\n            <div className={classes.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                        <div>\r\n                            <div>\r\n                                <textarea value={newMessageBody}\r\n                                          onChange={onNewMessageChange}\r\n                                          placeholder=\"Enter message\">\r\n                            </textarea>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <button onClick={onSendMessageClick}> Send</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <button>Send</button>\r\n                    <textarea ref={newMessageElement}></textarea>\r\n\r\n                </div>\r\n                )\r\n                }\r\n\r\n                export default Dialogs;","import React from 'react'\r\nimport {sendMessageAC, updateNewMessageBodyAC} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: InitialStateType //дробить?\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: () => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        updateNewMessageBody: (body: string) => {\r\n            dispatch(updateNewMessageBodyAC(body));\r\n        },\r\n        sendMessage: () => {\r\n            dispatch(sendMessageAC());\r\n        }\r\n    }\r\n}\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\nexport default DialogsContainer;","const FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\"\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\"\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\"\r\n\r\nexport type PhotosType = {\r\n    large: string | null\r\n    small: string | null\r\n}\r\n\r\nexport type UserType = {\r\n    id: string\r\n    photos: PhotosType\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: {\r\n        city: string,\r\n        country: string\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 5 as number,\r\n    totalUsersCount: 0 as number,\r\n    currentPage: 1 as number,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\nexport type ActionsTypes = ReturnType<typeof follow> |\r\n    ReturnType<typeof unfollow> |\r\n    ReturnType<typeof setUsers> |\r\n    ReturnType<typeof setCurrentPage> |\r\n    ReturnType<typeof setTotalUsersCount> |\r\n    ReturnType<typeof toggleIsFetching> |\r\n    ReturnType<typeof toggleFollowingProgress>\r\n\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true};\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false};\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.count}\r\n\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const follow = (userId: string) => ({type: FOLLOW, userId: userId}) as const\r\nexport const unfollow = (userId: string) => ({type: UNFOLLOW, userId: userId}) as const\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users: users}) as const\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage}) as const\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    count: totalUsersCount\r\n}) as const\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching}) as const\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId}) as const\r\n\r\nexport default usersReducer;","export default __webpack_public_path__ + \"static/media/Meelo.a12d6408.png\";","import React from 'react';\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../asserts/images/Meelo.png\";\r\nimport {InitialStateType, toggleFollowingProgress} from \"../../redux/users-reducer\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport axios from \"axios\";\r\n\r\ntype UsersPropsType = {\r\n    usersPage: InitialStateType\r\n    follow: (userId: string) => void\r\n    unfollow: (userId: string) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n    getUsers: any\r\n    followingInProgress: any\r\n    /*setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalUsersCount: number) => void*/\r\n}\r\n\r\nlet Users: React.FC<UsersPropsType> = props => {\r\n    const {usersPage, follow, unfollow, onPageChanged, getUsers, followingInProgress} = props;\r\n\r\n    let pagesCount = Math.ceil(usersPage.totalUsersCount / usersPage.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            {\r\n                pages.map(p => {\r\n                    return <span className={usersPage.currentPage === p ? styles.selectedPage : \"\"}\r\n                                 onClick={(e) => {\r\n                                     onPageChanged(p)\r\n                                 }}>{p}</span>\r\n                })\r\n            }\r\n        </div>\r\n\r\n        <button onClick={getUsers}>Get users</button>\r\n        {\r\n            usersPage.users.map(u => <div key={u.id}>\r\n<span>\r\n    <div>\r\n        <NavLink to={'/profile/' + u.id}>\r\n        <img src={u.photos.small !== null ? u.photos.small : userPhoto} className={styles.usersPhoto}/>\r\n            </NavLink>\r\n    </div>\r\n    <div>\r\n        {\r\n            u.followed\r\n                ?\r\n                <button disabled={followingInProgress.some((id: any) => id === u.id)} onClick={() => {\r\n                    toggleFollowingProgress(true,  +u.id);\r\n                    axios.delete(`https://social-network.samuraijs.com/api/1.0/follow/$(u.id)`, {\r\n                        withCredentials: true,\r\n                        headers: {\r\n                            \"API-KEY\": \"2e663c7e-754e-4005-8ebe-08de0775050a\"\r\n                        }\r\n                    })\r\n                        .then(response => {\r\n                            if (response.data.resultCode == 0) {\r\n                                follow(u.id)\r\n                            }\r\n                        });\r\n                    unfollow(u.id)\r\n                    toggleFollowingProgress(false,  +u.id)\r\n                }}>Unfollow</button>\r\n                :\r\n                <button disabled={followingInProgress.some((id: any) => id === u.id)} onClick={() => {\r\n                    toggleFollowingProgress(true,  +u.id)\r\n                    axios.post(`https://social-network.samuraijs.com/api/1.0/follow/$(u.id)`, {}, {\r\n                        withCredentials: true,\r\n                        headers: {\r\n                            \"API-KEY\": \"2e663c7e-754e-4005-8ebe-08de0775050a\"\r\n                        }\r\n                    })\r\n                        .then(response => {\r\n                            if (response.data.resultCode == 0) {\r\n                                follow(u.id)\r\n                            }\r\n                            toggleFollowingProgress(false, +u.id)\r\n                        });\r\n                }}>Follow</button>\r\n        }\r\n\r\n        </div>\r\n</span>\r\n                <span>\r\n    <span>\r\n        <div>{u.name}</div>\r\n        <div>{u.status}</div>\r\n    </span>\r\n    <span>\r\n        <div>{\"u.location.country\"}</div>\r\n        <div>{\"u.location.city\"}</div>\r\n\r\n    </span>\r\n</span>\r\n            </div>)\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default Users;","export default __webpack_public_path__ + \"static/media/loader.af80ae8f.gif\";","import React from \"react\";\r\nimport preloader from \"../../../asserts/images/loader.gif\";\r\n\r\nlet Preloader = (props: any) => {\r\n    return <div style={{backgroundColor: 'white'}}>\r\n        <img src={preloader}/>\r\n    </div>\r\n}\r\n    export default Preloader;","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"2e663c7e-754e-4005-8ebe-08de0775050a\"\r\n    }\r\n}) //object-instance\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get('users',\r\n            {\r\n                params: {\r\n                    page: currentPage,\r\n                    count: pageSize\r\n                }\r\n            }).then(response => {\r\n            return response.data;\r\n        });\r\n    }\r\n}\r\n\r\nexport const followAPI = {\r\n   getUsers(currentPage = 1, pageSize = 10){\r\n        return axios.get('follow',\r\n            {\r\n                params: {\r\n                    page: currentPage,\r\n                    count: pageSize\r\n                }\r\n            }).then(response => {\r\n            return response.data;\r\n        });\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    InitialStateType,\r\n    setCurrentPage,\r\n    setUsers, setTotalUsersCount, toggleIsFetching,\r\n    unfollow,\r\n    UserType, toggleFollowingProgress\r\n} from '../../redux/users-reducer';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport Users from './Users';\r\nimport Preloader from \"../common/preloader/Preloader\";\r\nimport {followAPI, usersAPI} from '../../api/api';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    usersPage: InitialStateType\r\n    followingInProgress: Array<number>\r\n    currentPage: number\r\n    pageSize: number\r\n    totalUsersCount: number\r\n}\r\n\r\nexport type MapDispatchToPropsType = {\r\n    follow: (userId: string) => void\r\n    unfollow: (userId: string) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalUsersCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass UsersContainer extends Component <UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true);\r\n\r\n        usersAPI.getUsers(this.props.currentPage, this.props.pageSize).then(data => {\r\n            this.props.toggleIsFetching(false);\r\n            this.props.setUsers(data.items);\r\n            this.props.setTotalUsersCount(data.totalCount);\r\n        });\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.toggleIsFetching(true);\r\n\r\n        followAPI.getUsers(this.props.totalUsersCount, this.props.pageSize).then(data => {\r\n            this.props.toggleIsFetching(false);\r\n            this.props.setUsers(data.items);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n\r\n            {this.props.usersPage.isFetching ? <Preloader/> : null}\r\n\r\n            <Users\r\n                usersPage={this.props.usersPage}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                onPageChanged={this.onPageChanged}\r\n                getUsers={usersAPI.getUsers}\r\n                followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        usersPage: state.usersPage,\r\n        currentPage: state.usersPage.currentPage,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    follow, unfollow, setUsers, setCurrentPage, setTotalUsersCount,\r\n    toggleIsFetching, toggleFollowingProgress\r\n})(UsersContainer);\r\n","import React from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\nimport Preloader from \"../../../common/preloader/Preloader\";\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null,\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = (props) => {\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img\r\n                    src='https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350'/>\r\n            </div>\r\n            <div className=\"classes.descriptionBlock\">\r\n                <img src={props.profile.photos.large}></img>\r\n                <div>{props.profile.fullName}\r\n                    <div/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n            )\r\n}\r\n\r\nexport default ProfileInfo;","import {v1} from \"uuid\";\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\ntype ProfileContactsType = {\r\n    facebook: string,\r\n    website: string,\r\n    vk: string,\r\n    twitter: string,\r\n    instagram: string,\r\n    youtube: string,\r\n    github: string,\r\n    mainLink: string,\r\n}\r\n\r\ntype ProfilePhotosType = {\r\n    small: string,\r\n    large: string,\r\n}\r\n\r\nexport type ProfileType = {\r\n    userId: number,\r\n    aboutMe: string,\r\n    contacts: ProfileContactsType,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    photos: ProfilePhotosType,\r\n}\r\n\r\n\r\n\r\nlet initialState = {\r\n    newPostText: \"\",\r\n    posts: [\r\n        {id: v1(), message: \"Hi, how are you?\", likesCount: 12},\r\n        {id: v1(), message: \"It's my first post\", likesCount: 7},\r\n        {id: v1(), message: \"It's my second post\", likesCount: 5}\r\n    ] as Array<PostType>,\r\n    profile: null as null | ProfileType,\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes =\r\n    ReturnType<typeof updateNewPostTextAC>\r\n    | ReturnType<typeof addPostAC>\r\n    | ReturnType<typeof setUserProfile>\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    let stateCopy = {...state, posts: [...state.posts]}\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost = {\r\n                id: v1(),\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            };\r\n            state.newPostText = \"\";\r\n            return {...state, posts: [...state.posts, newPost]}\r\n\r\n        case UPDATE_NEW_POST_TEXT:\r\n            return {\r\n                ...state, newPostText: action.newText\r\n            }\r\n\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const addPostAC = () => ({type: ADD_POST}) as const\r\n\r\nexport const updateNewPostTextAC = (text: string) => ({ //?поменяла на string, чтобы убрать ошибку в контейнере\r\n    type: UPDATE_NEW_POST_TEXT,\r\n    newText: text\r\n}) as const\r\n\r\nexport const setUserProfile = (profile: any) => ({type: SET_USER_PROFILE, profile}) as const\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport classes from './Post.module.css';\r\nimport {PostType} from \"../../../../redux/store\";\r\n\r\nconst Post: React.FC<PostType> = ({id, message,likesCount}) => {\r\n    return (\r\n        <div>\r\n            <div className={classes.item}>\r\n                <img\r\n                    src=\"https://tlum.ru/uploads/c2c776f1f20dd128d27ab941c26168c2e866ef6551da751aea7e83ae862a032a.jpeg\"/>\r\n                <div className={classes.item}>\r\n                    {message}\r\n                    <div>\r\n                        <span>like</span>{likesCount}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from \"./Posts/Post\";\r\nimport {InitialStateType} from \"../../../redux/profile-reducer\";\r\n\r\ntype MyPostsPropsType = {\r\n    profilePage: InitialStateType\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MyPostsPropsType> = (props) => {\r\n\r\n    let postsElements = props.profilePage.posts.map(p =>\r\n        <Post id={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    /*let newPostElement = React.createRef<HTMLTextAreaElement>();*/\r\n\r\n    let onAddPost = () => {\r\n        props.addPost();\r\n    }\r\n\r\n    let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = e.currentTarget.value;\r\n        props.updateNewPostText(text);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3> My posts </h3>\r\n            <div>\r\n                <div>\r\n                    <textarea\r\n                        onChange={onPostChange}\r\n                        value={props.profilePage.newPostText}\r\n                    />\r\n                </div>\r\n                <button onClick={onAddPost}> Add post</button>\r\n            </div>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostAC, InitialStateType, updateNewPostTextAC} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: InitialStateType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: () => {\r\n            dispatch(addPostAC());\r\n        },\r\n\r\n        updateNewPostText: (text) => {\r\n            let action = updateNewPostTextAC(text);\r\n            dispatch(action)\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null,\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\nconst {profile} = props\r\n    return <div>\r\n        <ProfileInfo profile={profile}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {InitialStateType, ProfileType, setUserProfile} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport { withRouter } from 'react-router-dom';\r\nimport {RouteComponentProps} from \"react-router\";\r\n\r\nexport type MapStateToPropsType = {\r\n    profile: ProfileType | null,\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setUserProfile: (profile: any) => void\r\n}\r\ntype ProfileComponentType = MapStateToPropsType & MapDispatchPropsType;\r\n\r\ntype PathParamsType ={\r\n    userId?: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileComponentType\r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = Number(this.props.match.params.userId)\r\n        if (!userId) {userId=2}\r\n        axios.get(\"https://social-network.samuraijs.com/api/1.0/profile/\" +userId\r\n                ,\r\n            ).then(response => {\r\n            this.props.setUserProfile(response.data)\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType):MapStateToPropsType => ({\r\nprofile: state.profilePage.profile\r\n});\r\n\r\nlet WithUrlDataContainerComponent = withRouter(ProfileContainer);\r\nexport default connect(mapStateToProps, {setUserProfile}) (WithUrlDataContainerComponent);","import {FC} from 'react';\r\nimport classes from './Header.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {InitialStateType} from \"../../redux/auth-reducer\";\r\n\r\ntype HeaderPropsType ={\r\n    isAuth: boolean\r\n    login: string\r\n    setAuthUserData: (data: InitialStateType) => void\r\n}\r\nconst Header: FC<HeaderPropsType> = ({isAuth, login}) => {\r\n    return <header className = {classes.header}>\r\n        <img alt='Some beach here' src='https://cdn.logo.com/hotlink-ok/logo-social-sq.png'/>\r\n        <div className={classes.loginBlock}>\r\n            {isAuth ?  login\r\n            :\r\n            <NavLink to={'./login'}>Log In</NavLink>}\r\n        </div>\r\n    </header>;\r\n}\r\nexport default Header;","\r\nconst SET_USER_DATA = \"SET_USER_DATA\";\r\n\r\nconst initialState = {\r\n    id: 2,\r\n    email: 'blabla@bla.bla',\r\n    login: 'samurai',\r\n    isAuth: false\r\n};\r\n\r\nexport type InitialStateType = {\r\n    id: number,\r\n    email: string,\r\n    login: string,\r\n    isAuth: boolean\r\n};\r\n\r\n/*export type InitialStateType = typeof initialState*/\r\nexport type ActionsTypes = ReturnType<typeof setAuthUserData>\r\n\r\n\r\nconst authReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const setAuthUserData = (data: InitialStateType) => ({type: SET_USER_DATA, data}) as const\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport axios from \"axios\";\r\nimport {InitialStateType, setAuthUserData} from \"../../redux/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    setAuthUserData: (data: InitialStateType) => void\r\n}\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToProps\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`, {\r\n            withCredentials: true //object with request settings, credentials=true means\r\n        })\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    let {id, email, login} = response.data.data\r\n                    this.props.setAuthUserData(response.data.data.login);\r\n                }\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {setAuthUserData})(HeaderContainer);","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./components/Header/Header\";\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\n\r\n\r\ntype PropsType = {\r\n    // store: StoreType\r\n    // dispatch: (action: ActionsTypes) => void\r\n}\r\n\r\nconst App: React.FC<PropsType> = () => {\r\n\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Route path='/dialogs' render={() =>\r\n                        <DialogsContainer/>}/>\r\n                    <Route path='/profile/:userId?' render={() =>\r\n                        <ProfileContainer/>}/>\r\n                    <Route path='/users' render={() =>\r\n                        <UsersContainer/>}/>\r\n                </div>\r\n            </div>\r\n        </BrowserRouter>)\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport profileReduser from \"./profile-reducer\";\r\nimport dialogsReduser from \"./dialogs-reducer\";\r\nimport sidebarReduser from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReduser,\r\n    dialogsPage: dialogsReduser,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    /*sidebarPage: sidebarReduser*/\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer> //state of application\r\nexport  type RootReduxStateType = ReturnType<typeof rootReducer>\r\n\r\nlet store = createStore(rootReducer);\r\n\r\nexport type ReduxStoreType = typeof store\r\n// @ts-ignore\r\nwindow.store=store;\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './index.css';\r\nimport store, {RootReduxStateType} from \"./redux/redux-store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\"\r\n\r\n\r\nlet rerenderEntireTree = (state: RootReduxStateType) => {\r\n    ReactDOM.render(\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </BrowserRouter>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\nrerenderEntireTree(store.getState())\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}